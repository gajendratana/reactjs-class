JS Topics to be covered:

1) RegEx
2) Call, apply and bind
3) ES6 Array methods -> (map, filter, findIndex, forEach, includes)
4) Callbacks, promises and Async/Await -> AJAX

What is Asyc Javascript?
-> Handles multiple tasks simultaneously
-> Allows a program to continue working on other task while waiting for external events, such as Network Reqs.


What are the types of Asyn JS?

1) Callback function 
2) Promises 
3) Asyc/Await 


1) Callback function: it is a function that is passed as an argument to another function and is executed after the first function has completed its execution.

const newFunc = (newCallback) => {
// I will perform my tasks and give output
//newCallback(output)

}

const newCallback = () => {
    
}


--> Callback Hell: When multiple Callbacks are nested within then that leads to callback hell it is also know as 'Pyramid of Doom'

getData(function (a)) {
    getMoreData(a, function(b)) {
        getEvenMoreData(b, function(c)){
            getEvenEvenMoreData(c, function(d)) {
                console.log(finalData)
            }
        }
    }
}


2) Promises: it is a way of handling async operations in an organized way. It is similar to CB but offers additional capabilities and the syntax is more readable..


        There are 3 states in promises: 
            1) Pending: Initail state, which is neither fullfilled or rejected
            2) Fullfilled: Promise is executed successfully
            3) Rejected: Promise failed

How to create a promise: 

    const myPromise = new Promise(function (res, rej) {

    })

     const myPromise = new Promise(function (res, rej) {
       setTimeout(() => {
         res('This is a promise')
       }, 2000)
    })
 
 console.log(myPromise)

  Creating a promise with Fetch APIs 

    fetch ('http://random-api.com')  -> [{}, {}, {}]
        .then(res => res.json())
        .then(data => {console.log(data)})

        .catch(err => {
            console.log(err)
        })


3) Asyc/Await: it allows us to write async code in a more sync  and readable way.

 async -> a keyword that is used to declare a function as async
 await -> a keyword that is used inside the async function to pause the execution of the function until the promise is executed

 const getData = async () => {
    const res = await fetch('http://random-api.com')
    const data = await res.json()
    console.log(data)
 }

 getData()

(JQuery ???)

const [state, setState] = useState([''])


===================== use Effect =====================

> It is a hook in react that allows to perform side effects (eg: like api calls)
> it accepts 2 arguments 
> 1st argument is callback function and the 2nd is dependency array (optional)
> Renders in the initial cycle
> we cannot use asyc function in the first argument (This HW... WHY?)
> if dependency array is empty then the useEffect renders only once.

> What is a Clean up function? (HW)
> PLEASE GET LAPTOPS (MAIN HW)

===================== Conditional Rendering =====================


Conditioanlly rendering components using terenary operators and conditions.

> When we are fetching data from APIs
> We we are doing promises or async tasks

Challenge: 
// Create button
// on Click of the button toggle the response


HW:
Can we use useState() inside if condition? If not why?

if (showContent) {
        const [error, setError] = useState(true)
    }



================================CONTROLLED AND UN CONTROLLED COMPONENT===========================

Controlled:
 > The component is handled by a state

 <input value={} onChange={} />

 Uncontrolled:
 > The DOM controlls the component

 <input default-value={} />

Limitations of Uncontrolled Components:

 Limited control over user input: With uncontrolled components, you have limited control over user input. For example, you cannot validate or transform user input before it is submitted to the server. This can lead to inconsistent data and errors on the server.

Limited ability to handle complex UI features: With uncontrolled components, it can be harder to handle complex UI features like conditional rendering or disabling/enabling certain inputs based on the state of other inputs. This is because uncontrolled components rely on the DOM state, which can be harder to manipulate and work with than React state.

Limited ability to test: With uncontrolled components, it can be harder to test the component's behavior because you need to rely on the DOM state to verify that the input values are being updated correctly. This can make it harder to write effective tests and debug issues.

Difficult to share state between components: With uncontrolled components, it can be difficult to share state between components because the component's state is managed internally by the DOM. This can make it harder to build complex applications that require shared state between multiple components.

Increased complexity as forms grow in size: As the size of the form grows, uncontrolled components can become harder to manage and maintain, especially when working with complex data structures. This can make it harder to write and maintain clean, well-organized code.


['Anil', 'AchiversIt', 'Zoro'].map(item => {
    return (
        <div>{item}</div>
    )
})


    TRY TO FINISH YESTERDAYS CHALLENGE OF DELETING THE USER FROM MAPPED ARRAY FOR THE NEXT 15 mins

    ====================== Custome Hooke and useRef =====================


    useRef: 

    useState makes a component render everytime the state is updated
    but in useRef the component is not rendered